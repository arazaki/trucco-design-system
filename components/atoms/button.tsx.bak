import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { Button as ShadcnButton, buttonVariants as shadcnButtonVariants } from '@/components/ui/button'
import { cn } from '@/lib/utils'

/**
 * Trucco Enhanced Button Component
 * 
 * Wraps shadcn/ui Button with Trucco's semantic theming system and additional features.
 * Provides backward compatibility with existing Trucco Button API while leveraging
 * shadcn's battle-tested foundation.
 */

// Trucco variant to shadcn variant mapping
const variantMapping = {
  // Trucco variants -> shadcn variants
  primary: 'default',
  secondary: 'secondary', 
  tertiary: 'outline',
  outline: 'outline',
  ghost: 'ghost',
  link: 'link',
  success: 'default', // Will use theme override
  warning: 'default', // Will use theme override  
  error: 'destructive',
  destructive: 'destructive',
  default: 'default',
} as const

// Enhanced variants that extend shadcn with semantic theming
const truccoButtonVariants = cva(
  // Base semantic styles
  '',
  {
    variants: {
      // Trucco variant overrides for semantic feedback
      truccoVariant: {
        primary: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
        tertiary: 'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground',
        outline: 'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
        success: 'bg-[var(--success)] text-white hover:bg-[var(--success-emphasis)] shadow-xs',
        warning: 'bg-[var(--warning)] text-white hover:bg-[var(--warning-emphasis)] shadow-xs',
        error: 'bg-destructive text-white shadow-xs hover:bg-destructive/90',
        default: '', // Use shadcn default
        destructive: '', // Use shadcn destructive
      },
      // Semantic theme variants
      theme: {
        semantic: '', // Uses current semantic tokens from CSS
        red: '[--primary:theme(colors.red.600)] [--primary-foreground:theme(colors.white)]',
        blue: '[--primary:theme(colors.blue.600)] [--primary-foreground:theme(colors.white)]',
        purple: '[--primary:theme(colors.purple.600)] [--primary-foreground:theme(colors.white)]',
        green: '[--primary:theme(colors.green.600)] [--primary-foreground:theme(colors.white)]',
      },
      // Additional size variants not in shadcn 
      truccoSize: {
        xl: 'h-12 px-8 text-base', // Override for xl size
      },
      // Loading state styling
      loading: {
        true: 'cursor-wait',
        false: '',
      },
      // Full width variant
      fullWidth: {
        true: 'w-full',
        false: 'w-auto',
      },
      // Custom radius options
      radius: {
        none: 'rounded-none',
        sm: 'rounded-sm', 
        md: 'rounded-md',
        lg: 'rounded-lg',
        xl: 'rounded-xl',
        full: 'rounded-full',
      },
    },
    defaultVariants: {
      theme: 'semantic',
      loading: false,
      fullWidth: false,
    },
  }
)

// Define Trucco variant and size types
type TruccoVariant = 'primary' | 'secondary' | 'tertiary' | 'outline' | 'ghost' | 'link' | 'success' | 'warning' | 'error' | 'default' | 'destructive'
type ShadcnVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'
type TruccoSize = 'sm' | 'md' | 'lg' | 'xl' | 'icon'
type ShadcnSize = 'default' | 'sm' | 'lg' | 'icon'

// Size mapping from Trucco to shadcn
const sizeMapping = {
  sm: 'sm',
  md: 'default',  // Trucco md -> shadcn default
  lg: 'lg', 
  xl: 'lg',       // Trucco xl -> shadcn lg (we'll override with custom styles)
  icon: 'icon',
} as const

export interface ButtonProps
  extends Omit<React.ComponentProps<typeof ShadcnButton>, 'variant' | 'size'>,
    VariantProps<typeof truccoButtonVariants> {
  // Override variant to support Trucco variants
  variant?: TruccoVariant
  // Override size to support Trucco sizes
  size?: TruccoSize
  // Additional Trucco-specific props
  loading?: boolean
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
  // Semantic theme selection
  theme?: 'semantic' | 'red' | 'blue' | 'purple' | 'green'
  fullWidth?: boolean
  radius?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full'
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant = 'primary',
      size = 'md',
      theme = 'semantic',
      loading = false,
      leftIcon,
      rightIcon,
      fullWidth = false,
      radius,
      children,
      disabled,
      ...props
    },
    ref
  ) => {
    // Map Trucco variant to shadcn variant
    const shadcnVariant = variantMapping[variant] as ShadcnVariant
    
    // Map Trucco size to shadcn size
    const shadcnSize = sizeMapping[size] as ShadcnSize
    
    // Check if we need custom XL sizing
    const needsCustomXLSize = size === 'xl'
    const truccoSizeClass = needsCustomXLSize ? truccoButtonVariants({ truccoSize: 'xl' }) : ''
    
    // Determine if we need custom styling for this variant
    const needsCustomStyling = ['primary', 'secondary', 'tertiary', 'success', 'warning', 'error'].includes(variant)
    
    return (
      <ShadcnButton
        ref={ref}
        variant={shadcnVariant}
        size={shadcnSize}
        disabled={disabled || loading}
        className={cn(
          // Apply Trucco enhancements
          truccoButtonVariants({
            truccoVariant: needsCustomStyling ? variant : undefined,
            theme,
            loading,
            fullWidth,
            radius,
          }),
          truccoSizeClass,
          className
        )}
        {...props}
      >
        {loading ? (
          <>
            <svg
              className="animate-spin -ml-1 mr-2 h-4 w-4"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              />
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
            Loading...
          </>
        ) : (
          <>
            {leftIcon && <span className="inline-flex items-center shrink-0 mr-2">{leftIcon}</span>}
            {children}
            {rightIcon && <span className="inline-flex items-center shrink-0 ml-2">{rightIcon}</span>}
          </>
        )}
      </ShadcnButton>
    )
  }
)
Button.displayName = 'Button'

export { Button, truccoButtonVariants, shadcnButtonVariants }